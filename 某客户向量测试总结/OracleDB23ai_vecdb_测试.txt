
文本索引

8、文本索引
execute ctx_ddl.create_preference('en_lexer', 'BASIC_LEXER');
drop index text_content_idx;
create index text_content_idx on es_docs_100w_test(content) indextype is ctxsys.context parameters ('lexer en_lexer');
--parallel 8 parameters ('Lexer en_lexer sync (on commit)');

select id, content,length(content) as cont_len from es_docs_100w_test
where contains(content,'{TP53 protein modulation} or {TP53 wildtype tumor cells}')>0
order by id; 

----------------------------------------------------------------------
7、--测试结果运行情况
set serveroutput on;
DECLARE
   vec_2c vector;
   nid number;
   pid number;
BEGIN
   pid:=2000;
   SELECT id, vec_content
   INTO nid, vec_2c 
   FROM es_docs_100w_test 
   where id=pid;
   DBMS_OUTPUT.PUT_LINE(to_char(systimestamp,'YYYY-MM-DD HH24:MI:SS.FF6'));
   for rec in (
    select id, content,VECTOR_DISTANCE(vec_content,vec_2c) as distance
        FROM es_docs_100w_test
        where id<>nid
        ORDER BY VECTOR_DISTANCE(vec_content, vec_2c)
        FETCH APPROXIMATE FIRST 5 ROWS ONLY) LOOP
        DBMS_OUTPUT.PUT_LINE(rec.id);
    end loop;
    DBMS_OUTPUT.PUT_LINE(to_char(systimestamp,'YYYY-MM-DD HH24:MI:SS.FF6'));    
END;
/

--------------

6、创建索引
create vector index vec_content_idx on es_docs_100w_test(vec_content) organization inmemory neighbor graph
DISTANCE COSINE
WITH TARGET ACCURACY 90
parameters(type HNSW, neighbors 40, efconstruction 500);

drop index vec_content_idx;
create vector index vec_content_idx on es_docs_100w_test(vec_content) organization inmemory neighbor graph
DISTANCE COSINE;


5、分配内存池
show parameter vector_memory_size
-->console/oracle
sqlplus / as sysdba
show parameter vector_memory_size;
show parameter SGA_TARGET;
show parameter SGA_MAX;

create pfile from spfile;
ALTER SYSTEM SET SGA_MAX = 16G SCOPE=SPFILE;
ALTER SYSTEM SET SGA_TARGET = 16G SCOPE=SPFILE;
ALTER SYSTEM SET vector_memory_size = 12G SCOPE=SPFILE;
shutdown immediate;
startup
show parameter vector_memory_size;
alter PLUGGABLE database all open;

4、--执行看看向量情况
select vector_dims(vec_content) from es_docs_100w_test 
fetch first 1 row only;
select VECTOR_DIMENSION_FORMAT(vec_content) from es_docs_100w_test 
fetch first 1 row only;
select VECTOR_DIMENSION_FORMAT(vec_content) from es_docs_10000 
fetch first 1 row only;

3、--创建测试表es_docs_100w_test
drop table es_docs_100w_test;
create table es_docs_100w_test (
id number generated always as identity,
country varchar2(128),
medline_ta varchar2(1024),
title varchar2(1024),
content clob,
pages varchar2(128),
journal varchar2(1024),
pubdate varchar2(128),
source_from varchar2(1024),
publication_types varchar2(1024),
issue varchar2(128),
languages varchar2(128),
abstract clob,
pmid varchar2(128),
nlm_unique_id varchar2(128),
issn_linking varchar2(128),
filename varchar2(128),
vernacular_title varchar2(128),
authors varchar2(2000),
doi varchar2(128),
vec_content vector);

--truncate table es_docs_100w_test;

--重复100次生成测试数据
DECLARE
   v_counter NUMBER := 1; -- 循环计数器
BEGIN
   FOR v_counter IN 1..100 LOOP
      -- 这里是要执行的 SQL 语句，可以根据需求修改
        insert into es_docs_100w_test(country,medline_ta,title,content,pages,journal,
pubdate,publication_types,languages,abstract,filename,authors,vec_content) 
        select country,medline_ta,title,content,pages,journal,
pubdate,publication_types,languages,abstract,filename,authors,vec_content 
    from es_docs_10000;
      -- 可选：输出当前执行状态（仅在开发环境使用）
      DBMS_OUTPUT.PUT_LINE('Executed iteration: ' || v_counter);
   END LOOP;

   -- 提交事务（如需要）
   COMMIT;
END;
/

select count(*) from es_docs_100w_test;
select id, vec_content from es_docs_100w_test;

2、-----创建表

drop table es_docs_10000;
create table es_docs_10000 (
id number generated always as identity,
country varchar2(128),
keywords varchar2(4000),
references varchar2(4000),
medline_ta varchar2(1024),
title varchar2(1024),
content clob,
pages varchar2(128),
journal varchar2(1024),
mesh_terms varchar2(4000),
pubdate varchar2(128),
source_from varchar2(128),
publication_types varchar2(1024),
issue varchar2(128),
languages varchar2(128),
abstract clob,
pmid varchar2(128),
nlm_unique_id varchar2(128),
issn_linking varchar2(128),
filename varchar2(128),
vernacular_title varchar2(128),
authors varchar2(2000),
doi varchar2(128),
vec_content vector);

--truncate table es_docs_10000;

insert into es_docs_10000(country,medline_ta,title,content,pages,journal,
pubdate,publication_types,languages,abstract,filename,authors)
select 
json_value(data,'$.country') as country,
json_value(data,'$.medline_ta') as medline_ta,
json_value(data,'$.title') as title,
to_clob(json_query(data,'$.content')) as content,
json_value(data,'$.pages') as pages,
json_value(data,'$.journal') as journal,
json_value(data,'$.pubdate') as pubdate,
--json_value(data,'$.mesh_terms') as mesh_terms,
json_value(data,'$.publication_types') as publication_types,
json_value(data,'$.languages') as languages,
to_clob(json_query(data,'$.abstract')) as abstract,
json_value(data,'$.filename') as filename,
json_value(data,'$.authors') as authors
from es_10000;

1、--------创建外部表

先用sys用户给vector用户授权
sqlplus / as sysdba
alter session set container=bj_sales;
CREATE OR REPLACE DIRECTORY json_dir AS '/u01/ai/kbot2.2';
GRANT READ, WRITE ON DIRECTORY json_dir TO vector;
connect vector/vector@bj_sales;

CREATE OR REPLACE DIRECTORY json_dir AS '/u01/ai/kbot2.2';

GRANT READ, WRITE ON DIRECTORY json_dir TO vector;

drop table json_file_contents_no;
CREATE TABLE json_file_contents_no (data JSON)
  ORGANIZATION EXTERNAL
    (TYPE ORACLE_BIGDATA
     ACCESS PARAMETERS (
         com.oracle.bigdata.json.path = '$[*]'
         com.oracle.bigdata.fileformat = jsondoc
         )
     LOCATION (JSON_DIR:'es_tmp_no.json'))
  PARALLEL
  REJECT LIMIT UNLIMITED;

select * from json_file_contents_no;


-----------------------------