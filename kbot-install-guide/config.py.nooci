from langchain.embeddings.huggingface import HuggingFaceEmbeddings
from llm_prepare import load_llm_model
#from langchain_community.embeddings import OCIGenAIEmbeddings
#from langchain_community.llms import OCIGenAI
import torch
from modelPrepare import sparkAPI
from modelPrepare import glm4API
from modelPrepare import chatgptAPI
from langchain_community.embeddings import CohereEmbeddings
import llm_keys

device = "cuda" if torch.cuda.is_available() else "cpu"

#######  DEV #################
http_prefix = 'http://ip_address:8899/'
ORACLE_AI_VECTOR_CONNECTION_STRING="vector/vector@localhost:1521/FREEPDB1"
#######  PRD #################
#http_prefix = 'https://prd.oracle.k8scloud.site/'
#ORACLE_AI_VECTOR_CONNECTION_STRING="vector/vector@ip_address:1521/orclpdb1"

#######  the knowledge base root directory    #####################
KB_ROOT_PATH = '/home/opc/kbroot'

#######  sqlite parent directory    #######################################
sqlite_path = KB_ROOT_PATH

#######  OCI genAI Settings    #####################
#compartment_id = "ocid1.compartment.oc1..aaaaaaaapw7vdtp4sakhe7zs7tybhtapgc26ga472v62ykdboxxbuo2cad6q"
#GenAIEndpoint = "https://inference.generativeai.us-chicago-1.oci.oraclecloud.com"

#######  Vector Store setting    #######################################
score_threshold =  0.6
vector_store_limit= 10

#######  Reranker model setting    #######################################
#rerankerModel = 'bgeReranker'
#BGE_RERANK_PATH="/home/ubuntu/ChatGPT/Models/Embeddings/bge-reranker-large"  #BAAI/bge-reranker-large
BGE_RERANK_PATH="BAAI/bge-reranker-large"
rerankerModel = 'cohereReranker'
reranker_topk= 2

#######  the memory window for chat history   #####################
history_k = 5

#######  Embedding model setting    #######################################
CHUNK_SIZE = 500
CHUNK_OVERLAP = 50
#e5_large_v2 = HuggingFaceEmbeddings(model_name="/home/ubuntu/ChatGPT/Models/Embeddings/e5-large-v2", model_kwargs={'device': device})
#bge_large_zh_v15 = HuggingFaceEmbeddings(model_name="/home/ubuntu/ChatGPT/Models/Embeddings/bge-large-zh-v1.5", model_kwargs={'device': device})
e5_large_v2 = HuggingFaceEmbeddings(model_name="intfloat/e5-large-v2", model_kwargs={'device': device})
bge_m3 = HuggingFaceEmbeddings(model_name="BAAI/bge-m3", model_kwargs={'device': device})
bge_large_zh_v15 = HuggingFaceEmbeddings(model_name="BAAI/bge-large-zh-v1.5", model_kwargs={'device': device})

#genaiEmbedding = OCIGenAIEmbeddings(
#    model_id="cohere.embed-multilingual-v3.0",
#    service_endpoint=GenAIEndpoint,
#    compartment_id=compartment_id,
#    auth_type='INSTANCE_PRINCIPAL'
#)

cohereEmbedding = CohereEmbeddings(model="embed-multilingual-v3.0", cohere_api_key=llm_keys.cohere_api_key)

## no need for a certain model, comment it
EMBEDDING_DICT = {
    # 'm3e-base': m3eEmbedding,
    'bge_m3': bge_m3,
    'bge_large_zh_v15': bge_large_zh_v15,
    #'oci_genai_embed': genaiEmbedding,
    'e5_large_v2': e5_large_v2,
    'cohere_embed':cohereEmbedding
}

#######  llm model setting          #######################################
# use default authN method   INSTANCE_PRINCIPAL
#ociGenAICohere = OCIGenAI(
#    model_id="cohere.command",
#    service_endpoint=GenAIEndpoint,
#    compartment_id=compartment_id,
#    auth_type='INSTANCE_PRINCIPAL',
#    model_kwargs={'max_tokens': 4096,
#                  'temperature': 0,
#                  }
#)

#ociGenAILlama2 =  OCIGenAI(
#    model_id="meta.llama-2-70b-chat",
#    service_endpoint=GenAIEndpoint,
#    compartment_id=compartment_id,
#    auth_type='INSTANCE_PRINCIPAL',
#    model_kwargs = {  
#      'max_tokens': 4096,
#     'temperature'   : 0.10,
#     }
#)

MODEL_DICT = {
    ######################      API models        #############################################
    #'OCIGenAICohere': ociGenAICohere,
    #'OCIGenAILlama2': ociGenAILlama2,
    #'Chatglm3Remote': load_llm_model('chatglm3Remote'),
    'XingHuo': sparkAPI.SparkLLM(),
    'ChatGLM4':  glm4API.GLM4(),
    'ChatGPT' : chatgptAPI.gpt3,
    'Qwen-plus': load_llm_model('Qwen-plus'),
    'Cohere-CommandR+': load_llm_model('Cohere'),
    ######################      local models      ###########################################
    ###   format 1) : local path
    # e.g.  'llama-2-7b-chat':   load_llm_model("/home/ubuntu/ChatGPT/Models/meta/llama2/Llama-2-7b-chat-hf"),
    #'Llama-2-7B-Chat': load_llm_model('Llama-2-7B-Chat','/home/ubuntu/ChatGPT/Models/meta/llama2/Llama-2-7b-chat-hf'),
    #'Gemma-7B-IT': load_llm_model('Gemma-7B-IT','/home/ubuntu/ChatGPT/Models/google/gemma-7b-it'),
    #'Mistral-7B-Instruct-v0.2': load_llm_model('Mistral','/home/ubuntu/ChatGPT/Models/mistral/Mistral-7B-Instruct-v0.2'),
    #'Qwen1.5-7B-Chat': load_llm_model('/home/ubuntu/ChatGPT/Models/Qwen/Qwen1.5-7B-Chat'),
    #'Llama-3-8B-Instruct': load_llm_model('Llama3','/home/ubuntu/ChatGPT/Models/meta/Meta-Llama-3-8B-Instruct'),

    ###   format 2) : huggingface id
    #'Llama-2-7B-Chat': load_llm_model('Llama2','meta-llama/Llama-2-7b-chat-hf'),
    #'Gemma-7B-IT': load_llm_model('Gemma','google/gemma-7b-it'),
    #'Mistral-7B-Instruct-v0.2': load_llm_model('Mistral','mistralai/Mistral-7B-Instruct-v0.2'),
    'Qwen1.5-7B-Chat': load_llm_model('Qwen','Qwen/Qwen1.5-7B-Chat'),

    ###   format 3) : llm_prepare.py special configured model, sometimes we need special model params
    #'ChatGLM3-6B': load_llm_model('chatglm3')
}

########  VECTOR_STORE Types  #######################################
VECTOR_STORE_DICT = [
    'faiss',
    'oracle'
]
